{"version":3,"sources":["assets/rabbit.gif","assets/carrot.jpg","App.js","reportWebVitals.js","index.js"],"names":["TimePicker","timer","setTimer","useState","hour","setHour","minute","setMinute","second","setSecond","className","type","mode","onChange","e","target","value","onClick","Timer","goBack","delay","setDelay","count","setCount","total","setTotal","audio","setAudio","useEffect","split","h","m","s","parseInt","Audio","useInterval","current","play","progressNum","Math","round","progress","src","rabbit","alt","style","marginLeft","width","carrot","App","screen","setScreen","time","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96bd6f71.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rabbit.c00e47da.gif\";","export default __webpack_public_path__ + \"static/media/carrot.f824eadc.jpg\";","import { useState, useEffect } from 'react'\nimport useInterval from '@use-it/interval'\n\nimport rabbit from './assets/rabbit.gif'\nimport carrot from './assets/carrot.jpg'\nimport './App.css'\n\nfunction TimePicker({ timer, setTimer }) {\n  const [hour, setHour] = useState('00')\n  const [minute, setMinute] = useState('30')\n  const [second, setSecond] = useState('00')\n  return (\n    <div className='time-picker'>\n      <input type=\"text\" mode=\"number\" onChange={(e) => setHour(e.target.value)} value={hour} />\n      <input type=\"text\" mode=\"number\" onChange={(e) => setMinute(e.target.value)} value={minute} />\n      <input type=\"text\" mode=\"number\" onChange={(e) => setSecond(e.target.value)} value={second} />\n      <button onClick={() => setTimer(`${hour}:${minute}:${second}`)}>SET</button>\n    </div>\n  )\n}\n\nfunction Timer({ timer, goBack}) {\n  const [delay, setDelay] = useState(1000)\n  const [count, setCount] = useState(0)\n  const [total, setTotal] = useState(0)\n  const [audio, setAudio] = useState(null)\n  \n  useEffect(() => {\n    const [h,m,s] = timer ? timer.split(':') : [0,0,0]\n    const total = (parseInt(h) * 60 * 60) + (parseInt(m) * 60) + parseInt(s)\n    setTotal(total)\n    setDelay(1000)\n    setCount(0)\n    setAudio(new Audio('/mario_game_over.mp3'))\n  }, [timer])\n\n  useInterval(() => {\n    if (total && count < total) {\n      setCount((current) => (current || 0) + 1);\n    } else {\n      if (audio) audio.play();\n      setDelay(null)\n    }\n  }, delay);\n\n  const reset = () => {\n    setDelay(1000)\n    setCount(0)\n  }\n\n  const progressNum = total ? Math.round(count / total * 100) : 0\n  const progress = `${progressNum}%` \n\n\n  return (\n    <div>\n      <div className='nav'>\n        <button onClick={reset}>RESET</button>\n        <button onClick={goBack}>BACK</button>\n      </div>\n      <div className='timer-container'>\n        <div className='rabbit-container'>\n          <img \n            src={rabbit} \n            alt='rabbit' \n            className='rabbit' \n            style={{ marginLeft: progress }}\n          />\n        </div>\n        \n        <div className='progress'>\n          <div className='progress-fill' style={{ width: progress }} />\n        </div>\n        <div className='carrot-container'>\n          {delay && (  \n            <img \n              src={carrot}\n              className='carrot'\n              alt='carrot'\n              width='100'\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction App() {\n  const [timer, setTimer] = useState('');\n  const [screen, setScreen] = useState('time-picker')\n  \n  const submitTimer = (time) => {\n    setTimer(time)\n    setScreen('timer')\n  }\n\n  const goBack = () => setScreen('time-picker')\n\n  return (\n    <div className=\"app\">\n      {screen === 'time-picker'\n        ? <TimePicker timer={timer} setTimer={submitTimer} />\n        : <Timer timer={timer} goBack={goBack} />\n      } \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}